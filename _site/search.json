[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "I completed my MSc in the Philosophy of the Social Sciences at the LSE in the Department of Philosophy, Logic, and Scientific Method. Before that, I completed my BA in Philosophy and Economics at Cardiff University.\nIn between my studies, I worked in the Government Economic Service in a few areas including international climate finance and local policy analysis."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Rogue Analysis (Blog)",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nNetworks\n\n\nCorruption\n\n\nPolitics\n\n\nMoney\n\n\nBudget\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\nYusuf Imaad Khan\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroductions\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2022\n\n\nYusuf Imaad Khan\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome to Rogue Analysis",
    "section": "",
    "text": "Hi. I’m Yusuf and this is my blog - “Rogue Analysis”. I’d like to join the community of philosophy blogs, practice my writing, and clarify a few thoughts."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Here are a bunch of resources that might be handy for somebody looking to get into philosophy/political theory, or generally interested in the content I’ve put on Rogue Analysis (okay plan to put on Rogue Analysis). It isn’t meant to be exhaustive, just stuff I’ve personally found useful.\nCAVEATS:\n\nI have yet to use some of these resources fully, but they seem useful to share\nThis page may be a bit of a “living document”, so potentially there will be changes\nPossibly not even worth saying, but none/some/all of this may or may not be helpful\n\nIn any case:"
  },
  {
    "objectID": "posts/mario/index.html",
    "href": "posts/mario/index.html",
    "title": "Analysis of Mario Kart",
    "section": "",
    "text": "USE THE LINE UP THING FROM OBSERVABLE"
  },
  {
    "objectID": "posts/welcome/index.html#why-is-your-blog-called-that",
    "href": "posts/welcome/index.html#why-is-your-blog-called-that",
    "title": "Welcome to Rogue Analysis",
    "section": "Why is your blog called that?",
    "text": "Why is your blog called that?\nSo why the edgy blog name? Well beyond it being a fun name, and feeling like I missed out on my chance to be embarrassingly edgy on the internet in my formative years:\n\nI’ve just resigned from being an analyst in the civil service to go and do some research in political philosophy.\nThe name came from a colleague remarking it would be great if there was some unit called “Rogue Analysis” that undertook analytical work with little oversight and a wide remit\nIt seemed like a suitably capacious name to cover things I’d like to write about:\n\n\nPolitical Philosophy\nSocial Epistemology\nPhilosophy of Social Science\nData Visualisation\nMario Kart\nWhy the government are:\n\n\nimport {checkbox} from \"@jashkenas/inputs\"\nviewof ch = checkbox([\"Stupid\", \"Cruel\", \"Insane\"])"
  },
  {
    "objectID": "posts/welcome/index.html#deeper-motivations",
    "href": "posts/welcome/index.html#deeper-motivations",
    "title": "Welcome to Rogue Analysis",
    "section": "Deeper Motivations",
    "text": "Deeper Motivations"
  },
  {
    "objectID": "posts/welcome/index.html#why-is-my-blog-called-that",
    "href": "posts/welcome/index.html#why-is-my-blog-called-that",
    "title": "Welcome to Rogue Analysis",
    "section": "Why is my blog called that?",
    "text": "Why is my blog called that?\nSo why the edgy blog name? Well beyond it being a fun name, and feeling like I wasn’t embarrassingly edgy enough on the internet in my teenage years:\n\nI’ve just resigned from being an analyst in the civil service to go and do some research in political philosophy\nThe name came from a colleague remarking it would be great if there was some unit called “Rogue Analysis” that undertook analytical work with little oversight and a wide remit\nIt seemed like a suitably capacious name to cover things I’d like to write about:\n\n\nPolitical Philosophy\nSocial Epistemology\nPhilosophy of Social Science\nPublic Policy\nData Visualisation\nMario Kart (okay I’m hoping to put some lighthearted stuff here too)"
  },
  {
    "objectID": "posts/welcome/index.html#some-further-motivations",
    "href": "posts/welcome/index.html#some-further-motivations",
    "title": "Welcome to Rogue Analysis",
    "section": "Some further motivations",
    "text": "Some further motivations\n\nRuthless criticism\nOn further reflection there are a few more strands of thought that tie in to what I hope to weave here. For one, Marx’s well known call for “ruthless criticism”:\n\n“If we have no business with the construction of the future or with organizing it for all time, there can still be no doubt about the task confronting us at present: the ruthless criticism of the existing order, ruthless in that it will shrink neither from its own discoveries, nor from conflict with the powers that be.”\n(Letter from Marx to Ruge - September 1843 - Accessible here.)\n\nI like the spirit here, and of particular interest to me is “conflict with the powers that be”. I am moving from a role that required political impartiality, to work that should be about far-reaching social and political criticism. Its a bit of a jarring transition, but its what I want to do. Reflecting on Marx’s words reminds me to resist slipping back into a weird political existence where policy is happening close by, but the range of acceptable criticism is minuscule.\n\n\nPhilosophy and public policy\nAnother strand of thought is the role of philosophy in public policy. I hope to write on matters of public policy. But here I agree with Chomsky that professional training in philosophy does not confer any “specific competence” to critique public policy, but it is a concern for philosophy:\n\n“There is no profession that can claim with greater authenticity that its concern is the intellectual culture of the society or that it possesses the tools for the analysis of ideology and the critique of social knowledge and its use.”\n\nThat said.\n\n\nThe open source community and its tools\nA final strand of thought is the open source community and its tools. I am quite taken"
  },
  {
    "objectID": "posts/welcome/index.html#a-note-on-form",
    "href": "posts/welcome/index.html#a-note-on-form",
    "title": "Welcome to Rogue Analysis",
    "section": "A note on form",
    "text": "A note on form\nI’d like to use this space to experiment with combining visuals/text/literate programming in a way that supports openness and clarity1. To achieve this, my website is built with an open source publishing system called Quarto. With Quarto you can do stuff like easily chuck this interactive visual of Schelling’s model of segregation built by Graham McNeil2 right into your blog3:\n\n\nCode\nviewof seed = Inputs.range([0.01, 0.99], {value: 0.01, step: 0.01, label: \"random seed\"})\n\nviewof squaresPerSide = Inputs.range([10, 120], {value: 80, step: 1, label: \"squares per side\"});\n\nviewof fractionEmpty = Inputs.range([0.01, 0.1], {value: 0.02, step: 0.01, label: \"fraction empty\"});\n\nviewof moveThreshold = Inputs.range([0, 1], {value: 0.3, step: 0.01, label: \"move threshold\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nAA = import('https://cdn.skypack.dev/@gjmcn/atomic-agents@0.1.6?min');\n\nAV = import('https://cdn.skypack.dev/@gjmcn/atomic-agents-vis@0.4.1?min')\n\n{\n  \n  // simulation\n  AA.random.seed(seed);\n  const sim = new AA.Simulation({\n    width: squaresPerSide * 5,\n    height: squaresPerSide * 5,\n    gridStep: 5\n  });\n  invalidation.then(() => sim.end());\n  \n  // initialise each square to land type 0, 1 or 2 (empty)\n  const nEmpty = Math.round(sim.squares.size * fractionEmpty);\n  for (let [i, sq] of AA.shuffle([...sim.squares]).entries()) {\n    sq.label('land', i < nEmpty ?  2 : i % 2);\n  }\n  \n  // get unhappy\n  const unhappy = () => sim.squares.filter(sq => {\n    const land = sq.label('land');\n    if (land === 2) return false;\n    const layer = sq.layer();\n    return layer.reduce((count, neb) => count + (neb.label('land') === land), 0) / \n           layer.reduce((count, neb) => count + (neb.label('land') !== 2), 0)\n             < moveThreshold;\n  }, true);\n\n  // each tick, move unhappy to random empty\n  const rand = AA.random.int(nEmpty);\n  sim.beforeTick = () => {\n    for (let sq of AA.shuffle(unhappy())) {\n      [...sim.withLabel('land', 2)][rand()]  // clunky - copying xset to array each step\n        .label('land', sq.label('land'));\n      sq.label('land', 2);\n    }\n  };\n  \n  // vis\n  const tints = [AV.colors.blue, AV.colors.orange, 0xbbbbbb];\n  sim.squares.forEach(sq => {\n    sq.zIndex = -Infinity\n    sq.vis({tint: sq => tints[sq.label('land')]});\n  });\n  return AV.visObs(sim, {\n    stats: true,\n    backParticles: true,\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code button even lets you see the underlying code used to make it! I’m hoping to experiment a bit further with this stuff, but I don’t want to get carried away with shiny things.\nAnyway I think that’s long enough for an intro post. Here’s to hoping it will go okay!"
  },
  {
    "objectID": "resources.html#workflow",
    "href": "resources.html#workflow",
    "title": "Resources",
    "section": "Workflow",
    "text": "Workflow\nI am trying to sort all my tools out now so I can just focus on reading/writing without unnecessary headaches. I vacillate between thinking I should just return to pen + paper or use fancy tools because they might have cool epistemic benefits. You can skip this part if you’re happy with your set up.\n\nPlain Text?\nI hadn’t really given my workflow much thought until recently. After a bit of browsing I came across “The Plain Person’s Guide to Plain Text Social Science.” by Kieran Healy. This is addressed at new grad students deciding what software to use for their work. Healy makes the case for using tools that “give you more control over the process of data analysis and writing”. This seems like a good idea.\nNow I’m not following this guide to the letter, but its convinced me to implement some decent version control, use open source tools where possible, and write papers in markdown for easier formatting. Worth a look, but no use upending your workflow if you have a system that works for you.\n\n\nTaking Notes\nOkay a confession - I do not have a good set up for digital note taking. I want to experiment a bit and see what works. Maybe it seems ridiculous that I haven’t sorted this out yet, but there are umpteen note taking apps that do cool things and could help me out.\nGenerally I want to move to some kind of plain text set up because it enables a focus on content rather than format, would enable easy conversion to other formats, and allow for easy version control. See here for some benefits of plain text notes. Currently I’m messing with some horrible mix of:\n\nOneNote (not plain text)\nSimplenote\nObsidian\nGitJournal"
  },
  {
    "objectID": "resources.html#notes",
    "href": "resources.html#notes",
    "title": "Resources",
    "section": "Notes",
    "text": "Notes"
  },
  {
    "objectID": "resources.html#data-visualisation",
    "href": "resources.html#data-visualisation",
    "title": "Resources",
    "section": "Data Visualisation",
    "text": "Data Visualisation\n\nWebsites\nSome great sources for R visuals:\n\nR Graph Gallery - great examples and ideas. Absolutely brilliant site that taught me a lot\nData to Viz- even more great ideas and examples\nhtmlwidgets for R - cool interactivey stuff\n\nand D3/Observable:\n\nD3 Graph Gallery\nObservable (how do more people not use this?)\n\n\n\nBooks\n\nR for Data Science\nggplot2: Elegant Graphics for Data Analysis\nData Visualization: A Practical Introduction\nPublic Policy Analytics: Code & Context for Data Science in Government\nScott Murray’s Interactive Data Visualization for the Web\n\n\n\nVideos\n\nA channel with some great videos on ggplot"
  },
  {
    "objectID": "resources.html#post-grad-applications",
    "href": "resources.html#post-grad-applications",
    "title": "Resources",
    "section": "Post-grad applications",
    "text": "Post-grad applications\n\nMentoring\nThe Minorities and Philosophy UK branch offer a mentoring scheme for marginalised people.\n\n\nProposals\nIt can be really tough to find good examples of what a PhD proposal is meant to look like. The Postgrad Application Library maintained by Orlando Lazar and Alena Davis was insanely helpful for me."
  },
  {
    "objectID": "resources.html#website",
    "href": "resources.html#website",
    "title": "Resources",
    "section": "Website",
    "text": "Website\nI made this website using Quarto, Github, and Netlify. You can fork the code for this website HERE. I found these resources useful to get going:\n\nQuarto Documentation\nCreating a blog with Quarto in 10 steps - Beatriz Milz\nThe ultimate guide to starting a Quarto blog - Albert Rapp"
  },
  {
    "objectID": "resources.html#phd-tips",
    "href": "resources.html#phd-tips",
    "title": "Resources",
    "section": "PhD Tips",
    "text": "PhD Tips\nWe’ll see how well this pans out, but I came across these two pieces that gave me suggestions to consider and a bit of reassurance:\n\n12 Tips for Success in Philosophy Graduate School - Liz Jackson\n6 Tips for Graduate Political Theory Students - Bruno Leipold"
  },
  {
    "objectID": "resources.html#thesis-stuff",
    "href": "resources.html#thesis-stuff",
    "title": "Resources",
    "section": "Thesis stuff?",
    "text": "Thesis stuff?"
  },
  {
    "objectID": "resources.html#writing-a-thesis",
    "href": "resources.html#writing-a-thesis",
    "title": "Resources",
    "section": "Writing a thesis",
    "text": "Writing a thesis\nAgain - no idea how this will pan out either"
  },
  {
    "objectID": "resources.html#taking-notes",
    "href": "resources.html#taking-notes",
    "title": "Resources",
    "section": "Taking notes",
    "text": "Taking notes"
  },
  {
    "objectID": "resources.html#networks",
    "href": "resources.html#networks",
    "title": "Resources",
    "section": "Networks",
    "text": "Networks\nIt can be helpful to join some networks for\nAlong with keeping an eye on philosophy twitter, I’ve found"
  },
  {
    "objectID": "resources.html#grad-school",
    "href": "resources.html#grad-school",
    "title": "Resources",
    "section": "Grad School",
    "text": "Grad School\n\nMentoring\nThe Minorities and Philosophy UK branch offer a mentoring scheme for marginalised people.\n\n\nWriting PhD Proposals in the UK\nIt can be really tough to find good examples of what a PhD proposal is meant to look like. The Postgrad Application Library maintained by Orlando Lazar and Alena Davis was insanely helpful for me.\n\n\nNetworks\nIt can be helpful to join some networks for\nAlong with keeping an eye on philosophy twitter, I’ve found\n\n\nPhilosophy Grad School Tips\nWe’ll see how well this pans out, but I came across these two pieces that gave me suggestions to consider and a bit of reassurance:\n\n12 Tips for Success in Philosophy Graduate School - Liz Jackson\n6 Tips for Graduate Political Theory Students - Bruno Leipold\n\n\n\nWriting a thesis\nAgain - no idea how this will pan out either"
  },
  {
    "objectID": "resources.html#grad-school-in-philosophypolitical-theory",
    "href": "resources.html#grad-school-in-philosophypolitical-theory",
    "title": "Resources",
    "section": "Grad School in Philosophy/Political Theory",
    "text": "Grad School in Philosophy/Political Theory\n\nMentoring\nThe Minorities and Philosophy UK branch offer a mentoring scheme for marginalised people in academic philosophy. This is for any UK philosophy student or researcher who consider themselves to be members of a marginalised group.\n\n\nNetworks\nIt can be helpful to join some philosophy networks to stay in the loop for papers/discussions/developments/conferences. I’ve found these networks to be useful:\n\nPhilosophy twitter\nPhilPeople\nThe community being created by the wonderful people at Philosophy Exchange\nLiverpool List email list\n\n\n\nPhilosophy Grad School Tips\nWe’ll see how well this pans out, but I came across these two pieces that gave me suggestions to consider and a bit of reassurance:\n\n12 Tips for Success in Philosophy Graduate School - Liz Jackson\n6 Tips for Graduate Political Theory Students - Bruno Leipold"
  },
  {
    "objectID": "resources.html#data-visualisationdata-science-stuff",
    "href": "resources.html#data-visualisationdata-science-stuff",
    "title": "Resources",
    "section": "Data visualisation/“Data Science” Stuff",
    "text": "Data visualisation/“Data Science” Stuff\nLike many people during the peaks of COVID, I got quite into data visualisation and used it a fair bit at work. Here are some useful resources I came across.\n\nWebsites\nSome great sources for R visuals:\n\nhttps://www.r-graph-gallery.com/index.html - great examples and ideas. Absolutely brilliant site that taught me a lot\nhttps://www.data-to-viz.com/ - even more great ideas and examples\nhttp://gallery.htmlwidgets.org/ - cool interactivey stuff\n\nand D3/Observable:\n\nhttps://d3-graph-gallery.com/\nhttps://observablehq.com/explore\n\n\n\nBooks\n\nR for Data Science - https://r4ds.had.co.nz/\nggplot2: Elegant Graphics for Data Analysis - https://ggplot2-book.org/\nData Visualization: A Practical Introduction - https://socviz.co/\nPublic Policy Analytics: Code & Context for Data Science in Government - https://urbanspatial.github.io/PublicPolicyAnalytics/index.html#\n\n\n\nVideos\n\nA channel with some great videos on ggplot - https://www.youtube.com/watch?v=HPJn1CMvtmI"
  },
  {
    "objectID": "resources.html#data-visualisationdata-science",
    "href": "resources.html#data-visualisationdata-science",
    "title": "Resources",
    "section": "Data Visualisation/“Data Science”",
    "text": "Data Visualisation/“Data Science”\nLike many people during the peaks of COVID, I got quite into data visualisation and used it a fair bit at work. Here are some useful resources I came across.\n\nWebsites\nSome great sources for R visuals:\n\nhttps://www.r-graph-gallery.com/index.html - great examples and ideas. Absolutely brilliant site that taught me a lot\nhttps://www.data-to-viz.com/ - even more great ideas and examples\nhttp://gallery.htmlwidgets.org/ - cool interactivey stuff\n\nand D3/Observable:\n\nhttps://d3-graph-gallery.com/\nhttps://observablehq.com/explore\n\n\n\nBooks\n\nR for Data Science - https://r4ds.had.co.nz/\nggplot2: Elegant Graphics for Data Analysis - https://ggplot2-book.org/\nData Visualization: A Practical Introduction - https://socviz.co/\nPublic Policy Analytics: Code & Context for Data Science in Government - https://urbanspatial.github.io/PublicPolicyAnalytics/index.html#\n\n\n\nVideos\n\nA channel with some great videos on ggplot - https://www.youtube.com/watch?v=HPJn1CMvtmI"
  },
  {
    "objectID": "resources.html#making-a-website",
    "href": "resources.html#making-a-website",
    "title": "Resources",
    "section": "Making a Website",
    "text": "Making a Website\nI made this website using Quarto, Github, and Netlify. I found these resources useful to get going:\n\nQuarto Documentation\nCreating a blog with Quarto in 10 steps - Beatriz Milz\nThe ultimate guide to starting a Quarto blog - Albert Rapp"
  },
  {
    "objectID": "posts/gradrank/index.html",
    "href": "posts/gradrank/index.html",
    "title": "Subjectively Ranking Philosophy Grad Programmes",
    "section": "",
    "text": "It’s that time of the year again. People are applying for grad school. If that’s you, I wish you all the best! Anyway, there’s all sorts of advice flying around and one of the things you might come across are rankings of grad programmes. In this post I want to consider a potentially helpful tool for subjectively ranking grad programmes.\nWhen I was looking into grad school for philosophy/political theory, I was recommended the Philosophical Gourmet Report (can you imagine - a ranking for philosophy programmes). Initially, it seemed helpful because I had no idea what to do, and it had breakdowns for subject specialism. But, there are a number of important criticisms of this ranking, and indeed rankings in general. These criticisms center around:\nNow maybe you can construct a counter-argument based on judgment aggregation to the effect of:\n“these rankings pool the independent opinions of specialists in the field - so are likely to track well with quality of grad programmes and stuff”\nI have at least two concerns here."
  },
  {
    "objectID": "posts/gradrank/index.html#what-to-do-about-rankings",
    "href": "posts/gradrank/index.html#what-to-do-about-rankings",
    "title": "Subjectively Ranking Philosophy Grad Programmes",
    "section": "What to do about rankings?",
    "text": "What to do about rankings?\nSo there are limitations and problems with rankings of programmes. But it can be helpful for prospective grad students to consider rankings based on a bunch of attributes as a way to focus their applications. But I think these rankings should:\n\nContain information that matters to grad students (e.g. going wider than just quality of faculty to stuff like cost of living in the area)\nHave that information be weighted according to their priorities\n\nTo some extent these concerns are addressed by the APDA project. It is great to see them consider student judgements but then also xyx"
  },
  {
    "objectID": "posts/gradrank/index.html#caveats-to-ranking",
    "href": "posts/gradrank/index.html#caveats-to-ranking",
    "title": "Subjectively Ranking Philosophy Grad Programmes",
    "section": "Caveats to ranking",
    "text": "Caveats to ranking\nNow that’s all good, but we need to be careful. No ranking will ever perfectly capture all the relevant information, and combine it in a non-controversial way. Some stuff can’t be quantified and made commensurable (e.g. are you really going to weigh up proximity to family/friends with faculty citation count? Any utilitarians thinking about answering that can fight me). Even so, it doesn’t need to be perfect, just better than what we have now."
  },
  {
    "objectID": "posts/gradrank/index.html#just-make-your-own-ranking---lineupjs",
    "href": "posts/gradrank/index.html#just-make-your-own-ranking---lineupjs",
    "title": "Subjectively Ranking Philosophy Grad Programmes",
    "section": "Just make your own ranking - LineupJS",
    "text": "Just make your own ranking - LineupJS"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html",
    "href": "posts/TrussDodgyNetwork/index.html",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "",
    "text": "The recent £45bn “mini-budget”1 was a disaster in both content and consequence. This is widely understood. To believe it was about growth is beyond a joke. The government claimed that tax cuts for the rich will somehow lead to growth that will boost wages and support public services. This is either unsupported by the evidence, or the opposite is true. Shockingly, it turns out that tax cuts for the rich (who spend less and save more as a proportion of their income) will just benefit the rich.\nThe government then U-turned on plans to abolish the 45p additional rate of tax. For now, this still leaves roughly £43bn (by 2026-27) of tax cuts such as the cancelled increase in corporation tax from 19% to 25%, the reversal of the temporary increase in national insurance, and the cancellation of the Health and Social Care Levy2.\nSo why are the government doing this? Simple. Truss and her cabinet are sock puppets for corporate power to further their own interests - not a novel feature of politics. Perhaps they genuinely believe, against the evidence, that tax cuts will create growth and prosperity for all. If so, we should pity them and their ideological delusions - not partake in them.\nA recent article in the Byline Times highlights the influence of corporate power by investigating Truss’s donors who collectively gave £424,349 to her campaign. The Guardian updated this figure with new information taking the donation amounts to over £500,000. These articles draw on the MP’s register of interests and reveal a dodgy network of billionaires, hedge fund managers, investment bankers, and others that will use the government to enrich themselves at the expense of everyone else.\nIf the remaining tax cuts in the “mini-budget” pass, this will concentrate the wealth of this dodgy network further, and give them even more power to buy off the government.\nIn this post, I wanted to explore a way of visualising this network of dodgy donors, and explore the landscape of UK political donations more generally."
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#test",
    "href": "posts/TrussDodgyNetwork/index.html#test",
    "title": "Visualising Truss’s Dodgy Donor Network",
    "section": "test",
    "text": "test\n\n\nCode\nchart = ForceGraph(miserables, {\n  nodeId: d => d.id,\n  nodeGroup: d => d.group,\n  nodeTitle: d => `${d.id}\\n${d.group}`,\n  linkStrokeWidth: l => Math.sqrt(l.value),\n  width,\n  height: 600,\n  invalidation // a promise to stop the simulation when the cell is re-run\n});\n\n\n\nmiserables = FileAttachment(\"miserables.json\").json()\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 1.5, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 5, // node radius, in pixels\n  nodeStrength,\n  linkSource = ({source}) => source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const L = typeof linkStroke !== \"function\" ? null : d3.map(links, linkStroke);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));\n  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"center\",  d3.forceCenter())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", typeof linkStroke !== \"function\" ? linkStroke : null)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      .attr(\"r\", nodeRadius)\n      .call(drag(simulation));\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) => W[i]);\n  if (L) link.attr(\"stroke\", ({index: i}) => L[i]);\n  if (G) node.attr(\"fill\", ({index: i}) => color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) => T[i]);\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d => d.source.x)\n      .attr(\"y1\", d => d.source.y)\n      .attr(\"x2\", d => d.target.x)\n      .attr(\"y2\", d => d.target.y);\n\n    node\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet."
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#real",
    "href": "posts/TrussDodgyNetwork/index.html#real",
    "title": "Visualising Truss’s Dodgy Donor Network",
    "section": "real",
    "text": "real\n\n\nCode\ngraph = FileAttachment(\"trussj.json\").json()\n\n//byline\n\nchart = ForceGraph(graph, {\n  nodeId: d => d.id,\n  nodeGroup: d => d.group,\n  nodeText: d => d.info,\n  nodeTitle: d => `${d.id} (${d.group}) ${d.info}`,\n  linkStrokeWidth: l => Math.sqrt(l.value)/20,\n  nodeRadius: l => Math.sqrt(l.value)/10,\n  nodeStrength: -1500, // n => (Math.sqrt(n.value, 1))*-1,\n  width,\n  height: 500,\n  invalidation // a promise to stop the simulation when the cell is re-run\n});\n\n// Fixing it\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/disjoint-force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeText,\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 0, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 100, // node radius, in pixels\n  nodeStrength, // = -900,\n  linkSource = ({source}) => source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const NT = nodeText == null ? null : d3.map(nodes, nodeText).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const R = typeof nodeRadius !== \"function\" ? null : d3.map(links, nodeRadius);\n  const NS = typeof nodeStrength !== \"function\" ? null : d3.map(links, nodeStrength);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));\n  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", linkStroke)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) => W[i]);\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      //.attr(\"r\", nodeRadius)\n      .attr(\"r\", typeof nodeRadius !== \"function\" ? nodeRadius : null)\n      .call(drag(simulation));\n\n  if (G) node.attr(\"fill\", ({index: i}) => color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) => T[i]);\n  if (R) node.attr(\"r\", ({index: i}) => R[i]);\n  if (NS) node.attr(\"node-strength\", ({index: i}) => NS[i]);\n\n  // Handle invalidation.\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d => d.source.x)\n      .attr(\"y1\", d => d.source.y)\n      .attr(\"x2\", d => d.target.x)\n      .attr(\"y2\", d => d.target.y)\n      .attr(\"r\", d => d.value);\n\n    node\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet."
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#further-analysis",
    "href": "posts/TrussDodgyNetwork/index.html#further-analysis",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Further analysis",
    "text": "Further analysis"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#sankey",
    "href": "posts/TrussDodgyNetwork/index.html#sankey",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Sankey",
    "text": "Sankey"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#donations-to-party-by-donor-type",
    "href": "posts/TrussDodgyNetwork/index.html#donations-to-party-by-donor-type",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Donations to Party by Donor Type",
    "text": "Donations to Party by Donor Type\n\nMost of the Conservative Party’s funding comes from individuals and companies\n\n\n\n\n\n\nRoughly £14m of the £17m in donations received by the Conservative Parties so far this year has been from individuals and businesses. Not hugely surprising, but interesting to compare to the donation sources of the other parties. Its worth mentioning that opposition parties receive the bulk of public funding through the “Short Money” payment to fund their activities.\nSo that’s a broad look at the types of donors, quantums involved, and parties receiving donations. As they’re proving so lucrative for the Conservative Party, lets zoom in a bit on individual and company donations.\n\n\n10 Individuals have donated over £250k to the Conservative Party so far this year\n\n\n\n\n\n\nhttps://www.parliament.uk/site-information/foi/transparency-publications/hoc-transparency-publications/financial-information/financial-assistance-to-opposition-parties/\nPUT MP REGISTER DATE\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds\nNote somewhere about how you’ve taken non-cash values\nhttps://www.theguardian.com/politics/2022/oct/05/liz-truss-raised-500000-for-bid-to-be-leader-register-of-interests-reveals UPDATE THE QUANTUMS"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#bars",
    "href": "posts/TrussDodgyNetwork/index.html#bars",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Bars",
    "text": "Bars\n\n\nCode\np <- don_by_party%>% \n  ggplot(aes(Value,DonorStatus,fill=Party_Name)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~Party_Name,ncol=1,scales = \"free_y\") +\n  scale_x_continuous(label=comma) +\n  theme_minimal()+\n  theme(legend.position=\"none\")\n\np"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#full-rain-cloud",
    "href": "posts/TrussDodgyNetwork/index.html#full-rain-cloud",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Full rain cloud",
    "text": "Full rain cloud\n\n\nCode\np <- don_by_party_indiv %>% \n  ggplot(aes(Value,DonorStatus,label=DonorName,colour=Party_Name)) +\n  geom_jitter(alpha=0.7,size=2.5) +\n  facet_wrap(~Party_Name,scales=\"free\",ncol = 1) +\n  scale_x_continuous(label=comma) +\n  labs(title = \"XYZ\")+\n  theme_minimal()+\n  theme(plot.title.position = \"plot\",\n        legend.position = \"none\")\n\np"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#raincloud-or-something",
    "href": "posts/TrussDodgyNetwork/index.html#raincloud-or-something",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Raincloud or something",
    "text": "Raincloud or something\n\n\nCode\nlibrary(ggbeeswarm)\nlibrary(hrbrthemes)\n\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n\n\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n\n\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\n\nCode\np <- don_by_party_indiv %>% \n  filter( #Party_Name == \"Conservative\",\n         grepl(\"Individual\",DonorStatus)) %>% \n  ggplot(aes(Party_Name,Value,label=DonorName,fill=Party_Name)) +\n  geom_jitter(alpha=0.4,size=2.5,grouponX=TRUE) +\n  scale_y_continuous(label=comma) +\n  labs(title = \"XYZ\")+\n  #theme_minimal()+\n  theme_ft_rc() +\n  theme(plot.title.position = \"plot\",\n        legend.position = \"none\") +\n  coord_flip()\n\n\nWarning: Ignoring unknown parameters: grouponX\n\n\nCode\np\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\n\n\n\nhttps://www.parliament.uk/site-information/foi/transparency-publications/hoc-transparency-publications/financial-information/financial-assistance-to-opposition-parties/\nPUT MP REGISTER DATE\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds\nNote somewhere about how you’ve taken non-cash values"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#trusss-dodgy-network",
    "href": "posts/TrussDodgyNetwork/index.html#trusss-dodgy-network",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Truss’s Dodgy Network",
    "text": "Truss’s Dodgy Network\n\n\nCode\nkey = Swatches(chart.scales.color)\n\ngraph = FileAttachment(\"trussj.json\").json() // scraped and cleaned from byline times article\n\n//byline\n\nchart = ForceGraph(graph, {\n  nodeId: d => d.id,\n  nodeGroup: d => d.group,\n  nodeText: d => d.info,\n  nodeTitle: d => `${d.id} (${d.group}) ${d.info}`,\n  linkStrokeWidth: l => Math.sqrt(l.value)/20,\n  nodeRadius: l => Math.sqrt(l.value)/10,\n  nodeStrength: -1500, // n => (Math.sqrt(n.value, 1))*-1,\n  width,\n  height: 400,\n  invalidation // a promise to stop the simulation when the cell is re-run\n});\n\n// Fixing it\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/disjoint-force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeText,\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 0, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 100, // node radius, in pixels\n  nodeStrength, // = -900,\n  linkSource = ({source}) => source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const NT = nodeText == null ? null : d3.map(nodes, nodeText).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const R = typeof nodeRadius !== \"function\" ? null : d3.map(links, nodeRadius);\n  const NS = typeof nodeStrength !== \"function\" ? null : d3.map(links, nodeStrength);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));\n  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", linkStroke)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) => W[i]);\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      //.attr(\"r\", nodeRadius)\n      .attr(\"r\", typeof nodeRadius !== \"function\" ? nodeRadius : null)\n      .call(drag(simulation));\n\n  if (G) node.attr(\"fill\", ({index: i}) => color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) => T[i]);\n  if (R) node.attr(\"r\", ({index: i}) => R[i]);\n  if (NS) node.attr(\"node-strength\", ({index: i}) => NS[i]);\n\n  // Handle invalidation.\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d => d.source.x)\n      .attr(\"y1\", d => d.source.y)\n      .attr(\"x2\", d => d.target.x)\n      .attr(\"y2\", d => d.target.y)\n      .attr(\"r\", d => d.value);\n\n    node\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow there is much to be improved on here2, but in essence\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#trusss-dodgy-network-of-donors",
    "href": "posts/TrussDodgyNetwork/index.html#trusss-dodgy-network-of-donors",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Truss’s Dodgy Network of Donors",
    "text": "Truss’s Dodgy Network of Donors\n\nTwo individuals were able to donate 2/3rds of Truss’s campaign spending limit3 of £300k\nHover over circles for information.\n\n\nCode\nkey = Swatches(chart.scales.color)\n\ngraph = FileAttachment(\"trussj.json\").json() // scraped and cleaned from byline times article\n\n//byline\n\nchart = ForceGraph(graph, {\n  nodeId: d => d.id,\n  nodeGroup: d => d.group,\n  nodeText: d => d.info,\n  nodeTitle: d => `${d.id} (${d.group}) ${d.info}`,\n  linkStrokeWidth: l => Math.sqrt(l.value)/20,\n  nodeRadius: l => Math.sqrt(l.value)/10,\n  nodeStrength: -1500, // n => (Math.sqrt(n.value, 1))*-1,\n  width,\n  height: 400,\n  invalidation // a promise to stop the simulation when the cell is re-run\n});\n\n// Fixing it\n\n// Copyright 2021 Observable, Inc. - some edits from YK\n// Released under the ISC license.\n// https://observablehq.com/@d3/disjoint-force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeText,\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 0, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 100, // node radius, in pixels\n  nodeStrength, // = -900,\n  linkSource = ({source}) => source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const NT = nodeText == null ? null : d3.map(nodes, nodeText).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const R = typeof nodeRadius !== \"function\" ? null : d3.map(links, nodeRadius);\n  const NS = typeof nodeStrength !== \"function\" ? null : d3.map(links, nodeStrength);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));\n  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", linkStroke)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) => W[i]);\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      //.attr(\"r\", nodeRadius)\n      .attr(\"r\", typeof nodeRadius !== \"function\" ? nodeRadius : null)\n      .call(drag(simulation));\n\n  if (G) node.attr(\"fill\", ({index: i}) => color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) => T[i]);\n  if (R) node.attr(\"r\", ({index: i}) => R[i]);\n  if (NS) node.attr(\"node-strength\", ({index: i}) => NS[i]);\n\n  // Handle invalidation.\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d => d.source.x)\n      .attr(\"y1\", d => d.source.y)\n      .attr(\"x2\", d => d.target.x)\n      .attr(\"y2\", d => d.target.y)\n      .attr(\"r\", d => d.value);\n\n    node\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere’s what I’ve got. I scraped the Byline Times article and just visualised the information (full credit to them). The orange circle in the center is Truss. The blue circles in orbit are each of the donors. The circles and links are scaled by the £ amount of their donation. In the interest of time, I haven’t got information on the additional donors mentioned in the Guardian here. So this covers £424,349 of donations.\nThe two largest blue circles each represent £100k of donations from Fitriani Hay and Natasha Barnaba. You can hover over to see more information about them. Also of note is Andrew Law (smaller circle - southeast) - who donated £5,127. Law hosted a champagne reception after the mini budget with Kwasi Kwarteng in attendance.\nAnyway there is much to be improved here4, but I think it serves to illustrate the dodgy financing network surrounding Truss and co. In the future, I hope to return to this sort of representation after some improvement. Obvious props to Sophie E. Hill’s “My Little Crony” for inspiration. Lets take it a bit further."
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#further-analysis---a-brief-look-at-uk-political-donations",
    "href": "posts/TrussDodgyNetwork/index.html#further-analysis---a-brief-look-at-uk-political-donations",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Further Analysis - A Brief Look at UK Political Donations",
    "text": "Further Analysis - A Brief Look at UK Political Donations\nSo we’ve had a quick look at the recent donors surrounding Truss. But how do things look beyond just Truss’s donors? What does the landscape of political donations in the UK look like?\nTo answer this, I’ve taken data from the Electoral Commission website for political donations in 2022 to date (all available quarters). I am focusing on Con/Lab/Lib/SNP, and I’ve tidied it up like so:\n\n\nCode\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(scales)\nlibrary(plotly)\n\n# Get list of MPs and donations from 2022\n\nmps <- read_csv(\"mps.csv\")\n\ndon <- read_csv(\"2022-electoral-commission-donations.csv\")\n\n# Cleaning donation names\n\ndon <- don %>% \n  mutate(RegulatedEntityName = str_remove_all(RegulatedEntityName, \"Dr |Ms |Mrs |Mr |The Rt Hon |Rt Hon | MP| MP |Dame |Sir \")) %>% \n  select(DonorName,DonorStatus,RegulatedEntityName,RegulatedDoneeType,Value)\n\n# Merge first and last name in MPs so we can make a lookup to party\n\nmps <- mps %>%\n  select(`First name`,`Last name`, Party) %>% \n  mutate(`Full name` = paste(`First name`,`Last name`, sep = \" \"))\n\n# Join donation data and MP/party lookup\n\ndon_by_party <- don %>% \n  full_join(mps, by=c(\"RegulatedEntityName\"=\"Full name\")) %>% \n  filter(!is.na(Value)) %>% # get rid of no donations\n\n# Classify the donations that go to parties rather than individuals. Grepl should catch this  \n  \n  mutate(Party_Name = case_when(\n    \n    # Most individual donations\n    \n    RegulatedDoneeType==\"MP - Member of Parliament\" ~ Party,\n    RegulatedDoneeType==\"Leadership Candidate\" ~ Party,\n    \n    # Party donations\n    \n    grepl(\"Liberal Democrat\",RegulatedEntityName) ~ \"Liberal Democrat\",\n    grepl(\"Conservative\",RegulatedEntityName) ~ \"Conservative\",\n    grepl(\"Labour\",RegulatedEntityName) ~ \"Labour\",\n    grepl(\"Green Party\",RegulatedEntityName) ~ \"Green\",\n    grepl(\"Scottish National Party\",RegulatedEntityName) ~ \"Scottish National Party\",\n    grepl(\"Sinn Féin\",RegulatedEntityName) ~ \"Sinn Féin\",\n    grepl(\"Plaid\",RegulatedEntityName) ~ \"Plaid Cymru\",\n    grepl(\"Democratic Unionist Party\",RegulatedEntityName) ~ \"Democratic Unionist Party\",\n    \n    # I am making no distinction between labour and the cooperative party because xyz\n    \n    grepl(\"Co-operative Party\",RegulatedEntityName) ~ \"Labour\")) %>% \n    \n    # There are a few MPs who evade classification due to missing data in donation register or because of name spelling and lookup (e.g. Tom vs Thomas). Fix this manually :(\n  \n  mutate(\n      \n      Party_Name = if_else(grepl(\"David Lammy|Jamie Driscoll|Stephen McCabe\",\n                                 RegulatedEntityName), \"Labour\", Party_Name),\n      \n      Party_Name = if_else(grepl(\"Tom Tugendhat|Andy Street|Steve Baker|Crispin Jeremy Rupert Blunt|Christopher Grayling\",\n                                 RegulatedEntityName), \"Conservative\", Party_Name),\n      \n    # Fix that issue where one donation has been classified as labour and coop\n      \n      Party_Name = if_else(grepl(\"Labour/Co-operative\",Party_Name),\"Labour\",Party_Name)\n        )\n\n# tbh I was only going to look at Con/Lab/Lib/SNP so...\n\ndon_by_party_indiv <- don_by_party %>% \n  select(Party_Name,DonorName,DonorStatus,Value) %>% \n  mutate(Value = str_remove_all(Value, \"£|,\"),\n         Value = as.numeric(Value)) %>% \n  group_by(Party_Name,DonorName,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() %>% \n  filter(grepl(\"Labour|Conservative|Liberal Democrat|Scottish National Party\",Party_Name))\n\ndon_by_party <- don_by_party_indiv %>% # be careful here - you mean to say non-agg, not the individual donor category\n  group_by(Party_Name,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() \n\nglimpse(don_by_party_indiv)\n\n\nRows: 954\nColumns: 4\n$ Party_Name  <chr> \"Conservative\", \"Conservative\", \"Conservative\", \"Conservat…\n$ DonorName   <chr> \"(AQ) Networks Ltd\", \"8hwe Ltd\", \"Abraham H Busby\", \"Acces…\n$ DonorStatus <chr> \"Company\", \"Company\", \"Individual\", \"Company\", \"Company\", …\n$ Value       <dbl> 28000.00, 3000.00, 35068.88, 10000.00, 2400.00, 10000.00, …\n\n\nNote - I have taken donations to individual MPs within parties and donations to parties themselves. I sum these and aggregate to get the total donations going towards the party. I have checked, and I don’t think this double counts. Do let me know if you reckon otherwise.\n\nMost of the Conservative Party’s funding comes from individuals and companies\n\n\n\n\n\n\nRoughly £14m of the £17m in donations received by the Conservative Parties so far this year has been from individuals and businesses. Not hugely surprising, but interesting to compare to the donation sources of the other parties. Its worth mentioning that opposition parties receive the bulk of public funding through the “Short Money” payment to fund their activities.\nSo that’s a broad look at the types of donors, quantums involved, and parties receiving donations. As they’re proving so lucrative for the Conservative Party, lets zoom in a bit on individual and company donations.\n\n\nThe top 10% of Conservative donors who are individuals make up 38% of total party donations in 2022 so far…\n\nJitterOrdered dots\n\n\nMedian donation from individual towards party: £10,000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nI have used a log scale here to better view the distribution and ordering. Also I don’t like how the ordered points obscure the density/overplotting. The jitter is probably better here.\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.parliament.uk/site-information/foi/transparency-publications/hoc-transparency-publications/financial-information/financial-assistance-to-opposition-parties/\nPUT MP REGISTER DATE\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds\nNote somewhere about how you’ve taken non-cash values\nhttps://www.theguardian.com/politics/2022/oct/05/liz-truss-raised-500000-for-bid-to-be-leader-register-of-interests-reveals UPDATE THE QUANTUMS"
  },
  {
    "objectID": "posts/test/index.html",
    "href": "posts/test/index.html",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "",
    "text": "blah blah\nThe recent £45bn “mini-budget”1 was a disaster in both content and consequence. This is widely understood. To believe it was about growth is beyond a joke. The government claimed that tax cuts for the rich will somehow lead to growth that will boost wages and support public services. This is either unsupported by the evidence, or the opposite is true. Shockingly, it turns out that tax cuts for the rich (who spend less and save more as a proportion of their income) will just benefit the rich.\nThe government has just U-turned on plans to abolish the 45p additional rate of tax. For now, this still leaves roughly £43bn (by 2026-27) of tax cuts such as the cancelled increase in corporation tax from 19% to 25%, the reversal of the temporary increase in national insurance, and the cancellation of the Health and Social Care Levy2.\nSo why are the government doing this? Simple. Truss and her cabinet are sock puppets for corporate power to further their own interests - not a novel feature of politics. A recent article in the Byline Times looks at this by investigating Truss’s donors who collectively gave £424,349 to her campaign. The article draws on the MP’s register of interests and reveals a dodgy network of billionaires, hedge fund managers, investment bankers, and others that will use the government to enrich themselves at the expense of everyone else.\nIf the remaining tax cuts in the “mini-budget” pass, this will concentrate the wealth of this dodgy network further, and give them even more power to buy off the government.\nIn this post, I wanted to explore a way of visualising this network of dodgy donors, and explore the landscape of UK political donations more generally."
  },
  {
    "objectID": "posts/test/index.html#trusss-dodgy-network-of-donors",
    "href": "posts/test/index.html#trusss-dodgy-network-of-donors",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Truss’s Dodgy Network of Donors",
    "text": "Truss’s Dodgy Network of Donors\nHover over circles for information.\n\nkey = Swatches(chart.scales.color)\n\ngraph = FileAttachment(\"trussj.json\").json() // scraped and cleaned from byline times article\n\n//byline\n\nchart = ForceGraph(graph, {\n  nodeId: d => d.id,\n  nodeGroup: d => d.group,\n  nodeText: d => d.info,\n  nodeTitle: d => `${d.id} (${d.group}) ${d.info}`,\n  linkStrokeWidth: l => Math.sqrt(l.value)/20,\n  nodeRadius: l => Math.sqrt(l.value)/10,\n  nodeStrength: -1500, // n => (Math.sqrt(n.value, 1))*-1,\n  width,\n  height: 400,\n  invalidation // a promise to stop the simulation when the cell is re-run\n});\n\n// Fixing it\n\n// Copyright 2021 Observable, Inc. - some edits from YK\n// Released under the ISC license.\n// https://observablehq.com/@d3/disjoint-force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d => d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeText,\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 0, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 100, // node radius, in pixels\n  nodeStrength, // = -900,\n  linkSource = ({source}) => source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) => target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) => N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const NT = nodeText == null ? null : d3.map(nodes, nodeText).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const R = typeof nodeRadius !== \"function\" ? null : d3.map(links, nodeRadius);\n  const NS = typeof nodeStrength !== \"function\" ? null : d3.map(links, nodeStrength);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) => ({id: N[i]}));\n  links = d3.map(links, (_, i) => ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) => N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", linkStroke)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) => W[i]);\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      //.attr(\"r\", nodeRadius)\n      .attr(\"r\", typeof nodeRadius !== \"function\" ? nodeRadius : null)\n      .call(drag(simulation));\n\n  if (G) node.attr(\"fill\", ({index: i}) => color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) => T[i]);\n  if (R) node.attr(\"r\", ({index: i}) => R[i]);\n  if (NS) node.attr(\"node-strength\", ({index: i}) => NS[i]);\n\n  // Handle invalidation.\n  if (invalidation != null) invalidation.then(() => simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d => d.source.x)\n      .attr(\"y1\", d => d.source.y)\n      .attr(\"x2\", d => d.target.x)\n      .attr(\"y2\", d => d.target.y)\n      .attr(\"r\", d => d.value);\n\n    node\n      .attr(\"cx\", d => d.x)\n      .attr(\"cy\", d => d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOkay so here’s what I’ve got. I scraped the Byline Times article and just visualised the information (full credit to them). The orange circle in the center is Truss. The blue circles in orbit are each of the donors. The circles and links are scaled by the £ amount of their donation.\nIf we take a look at the circles xyz\nNow there is much to be improved here3, but I think it begins to illustrate the dodgy financing network surrounding Truss and co. Lets take it a bit further."
  },
  {
    "objectID": "posts/test/index.html#further-analysis---a-brief-look-at-uk-political-donations",
    "href": "posts/test/index.html#further-analysis---a-brief-look-at-uk-political-donations",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Further Analysis - A Brief Look at UK Political Donations",
    "text": "Further Analysis - A Brief Look at UK Political Donations\nSo we’ve had a quick look at the recent donors surrounding Truss. But how do things look beyond just Truss’s donors? What does the landscape of political donations in the UK look like?\nTo answer this, I’ve taken data from the Electoral Commission website for political donations in 2022 to date (all available quarters). I am focusing on Con/Lab/Lib/SNP, and I’ve tidied it up like so:\n\n# Get list of MPs and donations from 2022\n\nmps <- read_csv(\"mps.csv\")\n\ndon <- read_csv(\"2022-electoral-commission-donations.csv\")\n\n# Cleaning donation names\n\ndon <- don %>% \n  mutate(RegulatedEntityName = str_remove_all(RegulatedEntityName, \"Dr |Ms |Mrs |Mr |The Rt Hon |Rt Hon | MP| MP |Dame |Sir \")) %>% \n  select(DonorName,DonorStatus,RegulatedEntityName,RegulatedDoneeType,Value)\n\n# Merge first and last name in MPs so we can make a lookup to party\n\nmps <- mps %>%\n  select(`First name`,`Last name`, Party) %>% \n  mutate(`Full name` = paste(`First name`,`Last name`, sep = \" \"))\n\n# Join donation data and MP/party lookup\n\ndon_by_party <- don %>% \n  full_join(mps, by=c(\"RegulatedEntityName\"=\"Full name\")) %>% \n  filter(!is.na(Value)) %>% # get rid of no donations\n\n# Classify the donations that go to parties rather than individuals. Grepl should catch this  \n  \n  mutate(Party_Name = case_when(\n    \n    # Most individual donations\n    \n    RegulatedDoneeType==\"MP - Member of Parliament\" ~ Party,\n    RegulatedDoneeType==\"Leadership Candidate\" ~ Party,\n    \n    # Party donations\n    \n    grepl(\"Liberal Democrat\",RegulatedEntityName) ~ \"Liberal Democrat\",\n    grepl(\"Conservative\",RegulatedEntityName) ~ \"Conservative\",\n    grepl(\"Labour\",RegulatedEntityName) ~ \"Labour\",\n    grepl(\"Green Party\",RegulatedEntityName) ~ \"Green\",\n    grepl(\"Scottish National Party\",RegulatedEntityName) ~ \"Scottish National Party\",\n    grepl(\"Sinn Féin\",RegulatedEntityName) ~ \"Sinn Féin\",\n    grepl(\"Plaid\",RegulatedEntityName) ~ \"Plaid Cymru\",\n    grepl(\"Democratic Unionist Party\",RegulatedEntityName) ~ \"Democratic Unionist Party\",\n    \n    # I am making no distinction between labour and the cooperative party because xyz\n    \n    grepl(\"Co-operative Party\",RegulatedEntityName) ~ \"Labour\")) %>% \n    \n    # There are a few MPs who evade classification due to missing data in donation register or because of name spelling and lookup (e.g. Tom vs Thomas). Fix this manually :(\n  \n  mutate(\n      \n      Party_Name = if_else(grepl(\"David Lammy|Jamie Driscoll|Stephen McCabe\",\n                                 RegulatedEntityName), \"Labour\", Party_Name),\n      \n      Party_Name = if_else(grepl(\"Tom Tugendhat|Andy Street|Steve Baker|Crispin Jeremy Rupert Blunt|Christopher Grayling\",\n                                 RegulatedEntityName), \"Conservative\", Party_Name),\n      \n    # Fix that issue where one donation has been classified as labour and coop\n      \n      Party_Name = if_else(grepl(\"Labour/Co-operative\",Party_Name),\"Labour\",Party_Name)\n        )\n\n# tbh I was only going to look at Con/Lab/Lib/SNP so...\n\ndon_by_party_indiv <- don_by_party %>% \n  select(Party_Name,DonorName,DonorStatus,Value) %>% \n  mutate(Value = str_remove_all(Value, \"£|,\"),\n         Value = as.numeric(Value)) %>% \n  group_by(Party_Name,DonorName,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() %>% \n  filter(grepl(\"Labour|Conservative|Liberal Democrat|Scottish National Party\",Party_Name))\n\ndon_by_party <- don_by_party_indiv %>% \n  group_by(Party_Name,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() \n\nglimpse(don_by_party_indiv)\n\nRows: 954\nColumns: 4\n$ Party_Name  <chr> \"Conservative\", \"Conservative\", \"Conservative\", \"Conservat…\n$ DonorName   <chr> \"(AQ) Networks Ltd\", \"8hwe Ltd\", \"Abraham H Busby\", \"Acces…\n$ DonorStatus <chr> \"Company\", \"Company\", \"Individual\", \"Company\", \"Company\", …\n$ Value       <dbl> 28000.00, 3000.00, 35068.88, 10000.00, 2400.00, 10000.00, …"
  },
  {
    "objectID": "posts/test/index.html#donations-to-party-by-donor-type",
    "href": "posts/test/index.html#donations-to-party-by-donor-type",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Donations to Party by Donor Type",
    "text": "Donations to Party by Donor Type\n\nMost of the Conservative Party’s funding comes from individuals and companies\n\n\n\n\n\n\nRoughly £14m of the £17m in donations received by the Conservative Parties this year has been from individuals and businesses. This shouldn’t be too surprising - public funding is mainly available for the opposition party through the “Short Money” system."
  },
  {
    "objectID": "posts/test/index.html#raincloud-or-something",
    "href": "posts/test/index.html#raincloud-or-something",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Raincloud or something",
    "text": "Raincloud or something\n\np <- don_by_party_indiv %>% \n  filter(Party_Name == \"Conservative\",\n         grepl(\"Individual|Company\",DonorStatus)) %>% \n  ggplot(aes(Value,DonorStatus,label=DonorName,fill=DonorStatus)) +\n  geom_jitter(alpha=0.7,size=2.5) +\n  facet_wrap(~DonorStatus,scales=\"free\",nrow = 2) +\n  scale_x_continuous(label=comma) +\n  labs(title = \"XYZ\")+\n  theme_minimal()+\n  theme(plot.title.position = \"plot\",\n        legend.position = \"none\")\n\n  \nggplotly(p)\n\n\n\n\n\nhttps://www.parliament.uk/site-information/foi/transparency-publications/hoc-transparency-publications/financial-information/financial-assistance-to-opposition-parties/\nPUT MP REGISTER DATE\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds\nNote somewhere about how you’ve taken non-cash values"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#a-brief-look-at-uk-political-donations",
    "href": "posts/TrussDodgyNetwork/index.html#a-brief-look-at-uk-political-donations",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "A Brief Look at UK Political Donations",
    "text": "A Brief Look at UK Political Donations\nSo we’ve seen the recent donors surrounding Truss. But how do things look beyond just Truss’s donors? What does the landscape of political donations in the UK look like? For some good general breakdowns - see the Electoral Commissions visuals. For a general report on the influence of big finance on democracy in the UK, see this report published by Positive Money over the summer. This is an incredibly comprehensive report, and they suggest a number of recommendations that you’d think would already be implemented as common sense.\nAnyway, to have my own look at the landscape, I’ve taken data from the Electoral Commission website5 for political donations reported6 in 2022 to date. I am focusing on Con/Lab/Lib/SNP, and I’ve tidied it up like so:\n\n\nCode\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(scales)\n\n\n# Get list of MPs and donations from 2022\n\nmps <- read_csv(\"mps.csv\")\n\ndon <- read_csv(\"2022-electoral-commission-donations.csv\")\n\n# Cleaning donation names\n\ndon <- don %>% \n  mutate(RegulatedEntityName = str_remove_all(RegulatedEntityName, \"Dr |Ms |Mrs |Mr |The Rt Hon |Rt Hon | MP| MP |Dame |Sir \")) %>% \n  select(DonorName,DonorStatus,RegulatedEntityName,RegulatedDoneeType,Value)\n\n\n# Merge first and last name in MPs so we can make a lookup to party\n\nmps <- mps %>%\n  select(`First name`,`Last name`, Party) %>% \n  mutate(`Full name` = paste(`First name`,`Last name`, sep = \" \"))\n\n# Join donation data and MP/party lookup\n\ndon_by_party <- don %>% \n  full_join(mps, by=c(\"RegulatedEntityName\"=\"Full name\")) %>% \n  filter(!is.na(Value)) %>% # get rid of no donations\n\n# Classify the donations that go to parties rather than individuals. Grepl should catch this. But you need to be careful here as it could just catch stuff like the \"Labour\" in SDLP - Social Democratic and Labour Party and then classify it as Labour. In fact, filter them here:\n  \n  filter(!grepl(\"SDLP\",RegulatedEntityName)) %>% \n  \n  mutate(Party_Name = case_when(\n    \n    # Most individual donations\n    \n    RegulatedDoneeType==\"MP - Member of Parliament\" ~ Party,\n    RegulatedDoneeType==\"Leadership Candidate\" ~ Party,\n    \n    # Party donations\n    \n    grepl(\"Liberal Democrat\",RegulatedEntityName) ~ \"Liberal Democrats\",\n    grepl(\"Conservative\",RegulatedEntityName) ~ \"Conservative\",\n    grepl(\"Labour\",RegulatedEntityName) ~ \"Labour\",\n    grepl(\"Green Party\",RegulatedEntityName) ~ \"Green\",\n    grepl(\"Scottish National Party\",RegulatedEntityName) ~ \"Scottish National Party\",\n    grepl(\"Sinn Féin\",RegulatedEntityName) ~ \"Sinn Féin\",\n    grepl(\"Plaid\",RegulatedEntityName) ~ \"Plaid Cymru\",\n    grepl(\"Democratic Unionist Party\",RegulatedEntityName) ~ \"Democratic Unionist Party\",\n    \n    # I am making no distinction between labour and the cooperative party because due tp their pact and organisation, I reckon its functionally the same \n    \n    grepl(\"Co-operative Party\",RegulatedEntityName) ~ \"Labour\")) %>% \n    \n    # There are a few MPs who evade classification due to missing data in donation register or because of name spelling and lookup (e.g. Tom vs Thomas). Fix this manually :(\n  \n  mutate(\n      \n      Party_Name = if_else(grepl(\"David Lammy|Jamie Driscoll|Stephen McCabe\",\n                                 RegulatedEntityName), \"Labour\", Party_Name),\n      \n      Party_Name = if_else(grepl(\"Tom Tugendhat|Andy Street|Steve Baker|Crispin Jeremy Rupert Blunt|Christopher Grayling\",\n                                 RegulatedEntityName), \"Conservative\", Party_Name),\n      \n    # Fix that issue where one donation has been classified as labour and coop\n      \n      Party_Name = if_else(grepl(\"Labour/Co-operative\",Party_Name),\"Labour\",Party_Name)\n        )\n\n# tbh I was only going to look at Con/Lab/Lib/SNP so...\n\ndon_by_party_indiv <- don_by_party %>% \n  select(Party_Name,DonorName,DonorStatus,Value) %>% \n  mutate(Value = str_remove_all(Value, \"£|,\"),\n         Value = as.numeric(Value)) %>% \n  group_by(Party_Name,DonorName,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() %>% \n  filter(grepl(\"Labour|Conservative|Liberal Democrats|Scottish National Party\",Party_Name))\n\ndon_by_party <- don_by_party_indiv %>% # be careful here - you mean to say non-agg, not the individual donor category\n  group_by(Party_Name,DonorStatus) %>% \n  summarise(Value = sum(Value)) %>% ungroup() \n\nglimpse(don_by_party_indiv)\n\n\nRows: 945\nColumns: 4\n$ Party_Name  <chr> \"Conservative\", \"Conservative\", \"Conservative\", \"Conservat…\n$ DonorName   <chr> \"(AQ) Networks Ltd\", \"8hwe Ltd\", \"Abraham H Busby\", \"Acces…\n$ DonorStatus <chr> \"Company\", \"Company\", \"Individual\", \"Company\", \"Company\", …\n$ Value       <dbl> 28000.00, 3000.00, 35068.88, 10000.00, 2400.00, 10000.00, …\n\n\nYou can download the csv I’ve used here.\nA few things to note:\n\nI have taken donations to individual MPs within parties and donations to parties themselves. I sum these and aggregate to get the total donations going towards the party. I have checked, and I don’t think this double counts. Do let me know if you reckon otherwise.\nI’ve summed the value of cash and non-cash donations. Yes this is crude and it relies on them reliably stating the value of any in-kind transfers. Not sure what to do otherwise. Also I’m sure there are so many other unmonetised benefits that accrue from the social aspects of networks (I’m not using this as an excuse, just pointing it out)\n\n\nMost of the Conservative Party and MP donations comes from individuals and companies\nPolitical donations to the major parties broken down by donor status. Figures given for donations reported in 2022 so far.\n\n\n\n\n\n\nRoughly £14m of the £17m in donations received by the Conservative Parties so far this year has been from individuals and companies. Not hugely surprising, but interesting to compare to the donation sources of the other parties. Its worth mentioning that opposition parties receive the bulk of public funding through the “Short Money” payment7 to fund their activities.\nSo that’s a broad look at the types of donors and quantums involved for the major parties. As individual and company donations are proving so lucrative for the Conservative Party, lets zoom in a bit on them.\n\n\nThe top 10% of individual Conservative Party and MP donors make up 38% of their total donations...\nHover over circles for information.\n\nJitterOrdered dots\n\n\nDashed line represents median of all donations from individuals to the major parties: £10,000\n\n\nCode\nlibrary(plotly)\n\n# Nah change this to ordered points - the jitter is too dense - if its ordered points I can put the median there too.\n\nmedian_indiv_don <- don_by_party_indiv %>% \n  filter(DonorStatus==\"Individual\") \n\nmedian_indiv_don <- median(median_indiv_don$Value)\n\nsum_party <- don_by_party_indiv %>%\n  group_by(Party_Name) %>% \n  summarise(sum(Value)) %>% \n  rename(total_don = `sum(Value)`)\n\ndon_top_dec <- don_by_party_indiv %>% \n  filter(DonorStatus==\"Individual\") %>% \n  group_by(Party_Name) %>% \n  mutate(decile=ntile(Value,n=10)) %>% \n  ungroup() %>% \n  group_by(decile,Party_Name) %>% \n  summarise(sum(Value)) %>% \n  ungroup()\n\ntitle_stat <- don_top_dec %>% \n  left_join(sum_party,by=\"Party_Name\") %>% \n  mutate(perc = `sum(Value)`/total_don)\n\n# should I chuck all my theming stuff in a function? Yes. Will I do it? ...soon\n\np <- don_by_party_indiv %>% \n  filter(grepl(\"Individual\",DonorStatus)) %>% \n  ggplot(aes(Party_Name,Value,label=DonorName,fill=Party_Name)) +\n  geom_jitter(alpha=0.6,size=2,grouponX=TRUE,colour=\"black\") +\n  scale_y_continuous(label=comma) +\n  theme_minimal()+\n  theme(legend.position = \"none\",\n        axis.text = element_text(face=\"bold\",size = 10),\n        axis.title = element_text(face=\"bold\",size = 12)) +\n  coord_flip()+\n  geom_hline(yintercept = 10000,linetype=\"dashed\") +\n  scale_fill_manual(values=c(\"navy\",\"red\",\"gold\",\"yellow\")) +\n  xlab(\"\") + ylab(\"Donation Amount (£)\")\n\n\nggplotly(p)\n\n\n\n\nIndividual here means individuals registered on a UK electoral register. Figures given for 2022 so far.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nI have used a log scale here to better view the distribution and ordering. Also I don’t like how the ordered points obscure the density/overplotting. The jitter is probably better here.\n\n\n\n\nCode\np<-don_by_party_indiv[order(don_by_party_indiv$Value),] %>%\n filter(DonorStatus==\"Individual\") %>% \n ggplot(aes(x=seq(Value), y=Value, lab=DonorName,fill=Party_Name)) +\n  geom_point(alpha=0.5,size=3.5) +\n  theme_bw() +\n  scale_y_continuous(labels = comma, trans=\"log10\") + \n  theme(axis.text.x=element_blank(),\n  panel.spacing.x = unit(1.5, \"lines\"),\n  panel.spacing.y = unit(1.5, \"lines\"),\n  axis.ticks.x=element_blank(),\n  legend.position=\"none\",\n  axis.text = element_text(face=\"bold\",size = 10),\n  axis.title = element_text(face=\"bold\",size = 12)) +\n  xlab(\"Individual donors ordered by £\") +\n  ylab(\"Donation Amount (£)\") +\n  facet_wrap(~Party_Name) +\n  geom_hline(yintercept = 10000,linetype=\"dashed\") +\n  scale_fill_manual(values=c(\"navy\",\"red\",\"gold\",\"yellow\"))\n\np<-ggplotly(p)\n\np\n\n\n\n\nIndividual here means individuals registered on a UK electoral register. Figures given for 2022 so far.\n\n\n\n\n\nNow this is quite mad. The top 10% of individual donors providing 38% of total donations to the Conservative party! The equivalent stat for Labour is 7% (but due to the use of Short Money, I wasn’t sure if that was a fair comparison). In any case, the distribution is quite telling. Lets take a closer look at some of these donors.\n\nThat small dot to the right is Christopher Charles Sheriff Harborne - a businessman and tech investor who has given £1,015,000 so far this year. Harborne was a massive donor to the Brexit party and had been a regular donor to the Conservative Party in previous years.\nNext to Christopher is Mark J Bamford - the chairman of the machinery manufacturer JCB who has given £973,000 so far this year. Another big supporter of Brexit.\nIn third place its Malcom S Healey - an entrepreneur/businessman/rich person (if only there was some word for sitting around and accumulating wealth because you own things) who has donated £550,000 so far this year\n\nI’d encourage you to hover over the names and do some googling. If there’s a concern that I’m unfairly singling out the Conservative donors whilst ignoring the large donations from individuals to other parties:\n\nThese other parties are not currently in power - so I’m less focused on them\nLarge political donations and the capture of politics by wealth is a problem for any party/organisation/etc. - e.g. see the failure of Labour under Blair to push the matter of capping political donations early in their first term, the Cash-for-Honours scandal, and then the failure of Labour, the Lib Dems, and Conservatives to agree to the suggestions in the Phillips review\n\nWe can do the same comparisons for donations from companies.\n\n\nMore companies give larger donations to the Conservative Party than the other parties. However, the maximum donations from companies are still smaller than donations from some individuals\nHover over circles for information.\n\nJitterOrdered dots\n\n\nDashed line represents median of all donations from companies to the major parties: £10,000 (yes I believe this is also £10k like the indiv. donations)\n\n\nCode\n# Nah change this to ordered points - the jitter is too dense - if its ordered points I can put the median there too.\n\nmedian_comp_don <- don_by_party_indiv %>% \n  filter(DonorStatus==\"Company\") \n\nmedian_comp_don <- median(median_comp_don$Value)\n\n\np <- don_by_party_indiv %>% \n  filter(grepl(\"Company\",DonorStatus)) %>% \n  ggplot(aes(Party_Name,Value,label=DonorName,fill=Party_Name)) +\n  geom_jitter(alpha=0.6,size=2,grouponX=TRUE,colour=\"black\") +\n  scale_y_continuous(label=comma) +\n  theme_minimal()+\n  theme(legend.position = \"none\",\n        axis.text = element_text(face=\"bold\",size = 10),\n        axis.title = element_text(face=\"bold\",size = 12)) +\n  coord_flip()+\n  geom_hline(yintercept = 10000,linetype=\"dashed\") +\n  scale_fill_manual(values=c(\"navy\",\"red\",\"gold\",\"yellow\")) +\n  xlab(\"\") + ylab(\"Donation Amount (£)\")\n\n\nggplotly(p)\n\n\n\n\nCompany refers to a UK-registered company which is incorporated in the UK and carries on business in the UK. Figures given for 2022 so far.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nI have used a log scale here to better view the distribution and ordering. Also I don’t like how the ordered points obscure the density/overplotting. The jitter is probably better here.\n\n\n\n\nCode\np<-don_by_party_indiv[order(don_by_party_indiv$Value),] %>%\n filter(DonorStatus==\"Company\") %>% \n ggplot(aes(x=seq(Value), y=Value, lab=DonorName,fill=Party_Name)) +\n  geom_point(alpha=0.5,size=3.5) +\n  theme_bw() +\n  scale_y_continuous(labels = comma, trans=\"log10\") + \n  theme(axis.text.x=element_blank(),\n  panel.spacing.x = unit(1.5, \"lines\"),\n  panel.spacing.y = unit(1.5, \"lines\"),\n  axis.ticks.x=element_blank(),\n  legend.position=\"none\",\n  axis.text = element_text(face=\"bold\",size = 10),\n  axis.title = element_text(face=\"bold\",size = 12)) +\n  xlab(\"Company donors ordered by £\") +\n  ylab(\"Donation Amount (£)\") +\n  facet_wrap(~Party_Name) +\n  geom_hline(yintercept = 10000,linetype=\"dashed\") +\n  scale_fill_manual(values=c(\"navy\",\"red\",\"gold\",\"yellow\"))\n\np<-ggplotly(p)\n\np\n\n\n\n\nCompany refers to a UK-registered company which is incorporated in the UK and carries on business in the UK. Figures given for 2022 so far.\n\n\n\n\n\nFeel free to hover over the names and have a google.\nOkay so that is a brief look at political donations to the main parties in 2022 so far. Do tweet with any feedback or suggestions."
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#donation-time-series",
    "href": "posts/TrussDodgyNetwork/index.html#donation-time-series",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Donation Time Series",
    "text": "Donation Time Series\nThe main issue I’m having is attaching party classifications for donations to MPs and the parties themselves. The goal would then be to aggregate things up at the party level to see donations towards a particular party (regardless of whether it was to an MP in that party or the party itself).\nThe Electoral Commission database apparently tracks donations going back to 2001 but for MPs it seems a bit gappy? E.g. I can’t find donations to Tony Blair specifically from the early 2000s. This strikes me as odd enough to investigate further before doing anymore analysis on it. For now I will just look at donations towards the major parties themselves.\nLets start by getting all the data we can on donations to parties from the Electoral Commission. This goes back to 2001. My goal here is to make a dataset where each donation has metadata for what the party association is. This isn’t actually included consistently/easily in the data, so we’ll have to make a look-up. These are basically the steps I took to clean up this year’s donation data, but I wanted to be a bit clearer here.\n\n\n\n\n\nCode\nglimpse(ts_party)\n\n\nRows: 61,070\nColumns: 7\n$ RegulatedEntityName <chr> \"Liberal Democrats\", \"Liberal Democrats\", \"Conserv…\n$ RegulatedEntityType <chr> \"Political Party\", \"Political Party\", \"Political P…\n$ DonorName           <chr> \"Kendal & South Westmoreland Liberal Club\", \"Scott…\n$ DonorStatus         <chr> \"Unincorporated Association\", \"Public Fund\", \"Comp…\n$ ReportedDate        <chr> \"28/07/2022\", \"28/07/2022\", \"28/07/2022\", \"28/07/2…\n$ Value               <dbl> 655.00, 1689.01, 4000.00, 1500.00, 10000.00, 10000…\n$ Party_Name          <chr> \"Liberal Democrats\", \"Liberal Democrats\", \"Conserv…\n\n\nAlso, once again I’m focusing on Con/Lab/Lib/SNP. Just in the interest of time/priorities (apologies). Also I’m going to just do things as a % of funding each year rather than convert things to real terms right now. I think the absolute value is also important. But for now I just want to get an idea of the extent of individual and company donations.\n\n\n\n\n\nOk ok fine\nTo do list:\nAttempt a time series\nAnd splitting the dataset up into donees that are individuals and organisations.\nhttps://www.parliament.uk/site-information/foi/transparency-publications/hoc-transparency-publications/financial-information/financial-assistance-to-opposition-parties/\nPUT MP REGISTER DATE\nA few things to note.\nSo there you have it. Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.\nAdd a bit about Andrew Law and Kwarteng\nThe break between markets and hedge funds\nNote somewhere about how you’ve taken non-cash values\nhttps://www.theguardian.com/politics/2022/oct/05/liz-truss-raised-500000-for-bid-to-be-leader-register-of-interests-reveals UPDATE THE QUANTUMS\nMENTION HOW YOU ADDED CASH AND NON CASH"
  },
  {
    "objectID": "posts/TrussDodgyNetwork/index.html#donation-time-series-maybe-next-time",
    "href": "posts/TrussDodgyNetwork/index.html#donation-time-series-maybe-next-time",
    "title": "Visualising Truss’s Dodgy Donor Network (and a Brief Look at UK Political Donations)",
    "section": "Donation Time Series? Maybe next time",
    "text": "Donation Time Series? Maybe next time\nI wanted to close by looking at the trend of political donations over time broken down by donor status. Unfortunately this is not exactly straightforward and I might revisit this another time.\nThe main issue I’m having is attaching party classifications for donations to MPs and the parties themselves. The goal would then be to aggregate things up at the party level to see donations towards a particular party (regardless of whether it was to an MP in that party or the party itself).\nAlso, another issue - the Electoral Commission database apparently tracks donations going back to 2001 but for MPs it seems a bit gappy? E.g. I can’t find donations to Tony Blair specifically from the early 2000s. This strikes me as odd enough to investigate further before doing anymore analysis on it.\nAlso, I’ll probably do some extra stuff like deflating the donation amounts and making sure to pick out where in the time series the Conservative Party are no longer eligible for Short Money etc.\nSo there you have it. I really wanted to close this piece with a fun quip like:\n\n“Much like an actual dodgy doner, Truss and her dodgy donors will poison this country - leaving it sick, weak, and forever in the toilet.”\n\nBut its just sad. These people are maintaining a pitifully low rate of corporation tax, removing the cap for bankers bonuses, subsidising energy companies, and more, whilst at the same reducing in work benefits for those on Universal Credit.\nAs Daniela Gabor has made clear, this is class war."
  }
]